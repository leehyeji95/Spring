좋은 객체 지향 설계의 5가지 원칙의 적용

1. SRP 단일 책임 원칙
" 한 클래스는 하나의 책임만 가져야 한다"
- 관심사 분리
- 구현 객체 생성, 연결 책임 : AppConfig
- 클라이언트 객체는 실행하는 책임만 담당


2. DIP 의존 관계 역전 원칙
" 프로그래머는 추상화에 의존해야지, 구체화에 의존하면 안된다. 의존성 주입은 이 원칙을 따르는 방법 중 하나"


3. OCP
" 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야한다."
- 다형성을 사용하고 클라이언트가 DIP 지킴
- 애플리케이션을 사용영역/구성영역으로 나눔
- 사용영역의 변경은 닫혀있다!

IoC, DI, Container
* 제어의 역전 IoC : 프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것
프레임워크 vs 라이브러리
프레임워크가 내가 작성한 코드를 제어하고 대신 실행하면 프레임워크다.(ex Junit)
내가 작성한 코드가 직접 제어의 흐름을 담당하면 라이브러리(Json Parser)

* 의존관계 주입
의존관계는 '정적인 클래스 의존 관계와 실행 시점에 결정되는 동적인 객체(인스턴스) 의존 관계' 를 분리해서 생각
정적인 클래스 의존 관계 : import 로 의존관계 파악(클래스 다이어그램)
동적인 객체 인스턴스 의존 관계 : 애플리케이션 실행 시점에 실제 생성된 객체 인스턴스의 참조가 연결된 의존 관계
의존관계 주입을 사용하면, 정적인 클래스 의존관계를 변경하지 않고 동적인 객체 인스턴스 의존관계를 쉽게 변경할 수 있다.

AppConfig 처럼 객체를 생성하고 관맇면서 의존관계를 연결해 주는 것을 IoC 컨테이너, DI 컨테이너(최근 주로)
또는 어셈블러, 오브젝트 팩토리
