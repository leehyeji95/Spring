'스프링 컨테이너'
ApplicationContext : 스프링 컨테이너, 인터페이스(다형성)
기존에는 AppConfig 를 사용해서 직접 객체를 생성하고 DI를 했지만, 스프링컨테이너를 사용할 것
스프링 컨테이너는 @Configuration 이 붙은 AppConfig 를 구성정보로 사용한다.
@Bean 이라 적힌 메서드를 모두 호출해서 반환된 객체를 스프링 컨테이너에 등록하고 이를 스프링 빈이라고 한다.
@Bean 이 붙은 메서드의 명을 스프링 빈의 이름으로 사용한다.

AnnotationApplicationContext 는 ApplicationContext 의 구현체이다.
스프링 컨테이너 안에 스프링 빈 저장소 안에 빈 이름, 빈 객체 등을 생성한다. (@Bean 이 붙은, 메서드 이름을 빈 이름으로)
@Bean(name="") 으로 임의로 부여할 수 있다. 항상 다른 이름을 부여하자.
스프링 컨테이너는 설정 정보를 참고해서 의존관계를 주입한다.(DI)


* 싱글톤 패턴 *
싱글톤 패턴을 적용하면 고객의 요청이 올때 마다 객체를 생성하는 것이 아니라, 이미 만들어진 객체를 공유해서 효율적으로 사용할 수 있다.
'문제점'
1. 코드 자체가 많이 들어간다
2. 의존관계상 getInstance() 해야하기 때문에 구현체 클래스에 의존한다 -> DIP 위반한다.
3. OCP 원칙 위반
4. 테스트의 어려움
5. 내부 속성 변경 및 초기화 어려움
6. private 생성자로 자식 클래스 만들기 어려움
7. 유연성 떨어짐

싱글톤 컨테이너 (=스프링 컨테이너)
싱글톤 패턴의 문제점을 해결하면서 객체 인스턴스를 싱글톤(1개만 생성)으로 관리한다.
=> Spring Bean

싱글톤 방식의 주의점
* 여러 클라이언트가 하나의 같은 객체 인스턴스를 공유하기 때문에 '무상태(stateless)'로 설계해야함
- 특정 클라이언트에 의존적인 필드가 있으면 안된다
- 특정 클라이언트가 값을 변경할 수 있는 필드가 있으면 안된다
- 가급적 읽기만 가능해야한다
- 필드 대신에 자바에서 공유되지 않는 지역변수, 파라미터, ThreadLocal 등을 사용해야한다.

@ComponentScan 은 @Component 가 붙은 모든 클래스를 스프링 빈으로 등록한다.
이때 스프링 빈의 기본 이름은 클래스면을 사용하되 맨 앞글자만 소문자를 사용한다.
직접 지정도 가능함. @Component("memberService")

스프링 부트 사용 시, 대표 시작 정보인 @SpringBootApplication 을 루트에 두고 -> 이 설정 안에 @ComponentScan 들어있다.
* 컴포넌트 스캔 기본 대상 (자동)
@Component : 컴포넌트 스캔에서 사용
@Controller : 스프링 MVC 컨트롤러에서 사용 + MVC 컨트롤러로 인식
@Service : 스프링 비즈니스 로직에서 사용
@Repository : 스프링 데이터 접근 계층에서 사용 + 스프링 데이터 접근 계층으로 인식하고, 데이터 계층의 예외를 스프링 예외로 변환
@Configuration : 스프링 설정 정보에서 사용 + 스프링 빈이 싱글톤으로 유지하도록 추가 처리

* 참고 : 어노테이션은 자바 기능이 아니고 스프링 기능이다! 상속관계 없음
